{"version":3,"sources":["Playlist.js","App.js","reportWebVitals.js","index.js"],"names":["Playlist","tracks","setTracks","useState","currentIndex","setCurrentIndex","isPlaying","setIsPlaying","useEffect","fetch","process","then","response","json","data","console","log","songs","Array","isArray","error","catch","React","createElement","className","map","track","index","isSong","artist","title","isPodcast","episodeTitle","key","id","onDoubleClick","handleDoubleClick","year","podcast","onClick","handlePrev","length","prevIndex","handlePlayPause","prev","handleNext","handleShuffle","prevTracks","sort","Math","random","App","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"sMAgHeA,MA7GEA,KACf,MAAOC,EAAQC,GAAaC,mBAAS,KAC9BC,EAAcC,GAAmBF,mBAAS,OAC1CG,EAAWC,GAAgBJ,oBAAS,GAE3CK,oBAAU,KACRC,MAAOC,uBACJC,KAAMC,GAAaA,EAASC,QAC5BF,KAAMG,IACLC,QAAQC,IAAI,gBAAiBF,GACzBA,EAAKG,OAASC,MAAMC,QAAQL,EAAKG,OACnCf,EAAUY,EAAKG,QAEfF,QAAQK,MAAM,8BAA+BN,GAC7CZ,EAAU,OAGbmB,MAAOD,GAAUL,QAAQK,MAAM,wBAAyBA,KAC1D,IAwCH,OACEE,IAAAC,cAAA,OAAKC,UAAU,sBACbF,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,UAAI,iCAGJD,IAAAC,cAAA,OAAKC,UAAU,6BACbF,IAAAC,cAAA,UACGtB,EAAOwB,IAAI,CAACC,EAAOC,KAClB,MAAMC,EAASF,EAAMG,QAAUH,EAAMI,MAC/BC,EAAYL,EAAMM,aACxB,OACEV,IAAAC,cAAA,MACEU,IAAKP,EAAMQ,IAAM,GAAGR,EAAMI,OAASJ,EAAMM,gBAAgBL,IACzDQ,cAAeA,IAnDJR,KACzBtB,EAAgBsB,GAChBpB,GAAa,IAiDsB6B,CAAkBT,GACvCH,UAAW,kBACTpB,IAAiBuB,EAAQ,SAAW,KAGrCC,EACG,GAAGF,EAAMI,WAAWJ,EAAMG,WAAWH,EAAMW,MAAQ,aACnDN,EACA,GAAGL,EAAMY,SAAW,eAAeZ,EAAMM,eACzC,qBAQdV,IAAAC,cAAA,MAAIC,UAAU,UACM,OAAjBpB,GAAyBH,EAAOG,GAC5BE,EACG,oBAAcL,EAAOG,GAAc0B,OAAS7B,EAAOG,GAAc4B,cACjE,gBACJ,qBAINV,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,UAAQgB,QA/DGC,KACK,IAAlBvC,EAAOwC,SACXlC,GAAa,GACbF,EAAiBqC,GACD,OAAdA,GAAoC,IAAdA,EAAkBzC,EAAOwC,OAAS,EAAIC,EAAY,MA2DvC,qBAC7BpB,IAAAC,cAAA,UAAQgB,QAvDQI,KACD,OAAjBvC,GACJG,EAAcqC,IAAUA,KAqDiBtC,EAAY,eAAY,eAC3DgB,IAAAC,cAAA,UAAQgB,QA1EGM,KACK,IAAlB5C,EAAOwC,SACXlC,GAAa,GACbF,EAAiBqC,GACD,OAAdA,GAAsBA,IAAczC,EAAOwC,OAAS,EAAI,EAAIC,EAAY,MAsEvC,qBAC7BpB,IAAAC,cAAA,UAAQgB,QAnDMO,KACpB5C,EAAW6C,GACY,IAAIA,GAAYC,KAAK,IAAMC,KAAKC,SAAW,OAiD5B,4BC7F3BC,MATf,WACE,OACE7B,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,mBACJD,IAAAC,cAACvB,EAAQ,QCKAoD,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3C,KAAK4C,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH3C,IAAAC,cAACD,IAAM4C,WAAU,KACf5C,IAAAC,cAAC4B,EAAG,QAORC,K","file":"static/js/main.2ed72527.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\"; // Import CSS\n\nconst Playlist = () => {\n  const [tracks, setTracks] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    fetch( process.env.PUBLIC_URL + \"/songs.json\")\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Fetched Data:\", data);\n        if (data.songs && Array.isArray(data.songs)) {\n          setTracks(data.songs);\n        } else {\n          console.error(\"Error: Data is not an array\", data);\n          setTracks([]); \n        }\n      })\n      .catch((error) => console.error(\"Error fetching songs:\", error));\n  }, []);\n\n  // Handle double-click to play a track\n  const handleDoubleClick = (index) => {\n    setCurrentIndex(index);\n    setIsPlaying(true);\n  };\n\n  // Handle Next Button\n  const handleNext = () => {\n    if (tracks.length === 0) return;\n    setIsPlaying(true);\n    setCurrentIndex((prevIndex) =>\n      prevIndex === null || prevIndex === tracks.length - 1 ? 0 : prevIndex + 1\n    );\n  };\n\n  // Handle Previous Button\n  const handlePrev = () => {\n    if (tracks.length === 0) return;\n    setIsPlaying(true);\n    setCurrentIndex((prevIndex) =>\n      prevIndex === null || prevIndex === 0 ? tracks.length - 1 : prevIndex - 1\n    );\n  };\n\n  // Handle Play/Pause Button\n  const handlePlayPause = () => {\n    if (currentIndex === null) return;\n    setIsPlaying((prev) => !prev);\n  };\n\n  // Handle Shuffle Button\n  const handleShuffle = () => {\n    setTracks((prevTracks) => {\n      let shuffledTracks = [...prevTracks].sort(() => Math.random() - 0.5);\n      return shuffledTracks;\n    });\n  };\n\n  return (\n    <div className=\"playlist-container\">\n      <div className=\"playlist-box\">\n        <h2>üéµ Classic Playlist</h2>\n\n        {/* Scrollable Playlist Container */}\n        <div className=\"playlist-scroll-container\">\n          <ul>\n            {tracks.map((track, index) => {\n              const isSong = track.artist && track.title;\n              const isPodcast = track.episodeTitle;\n              return (\n                <li\n                  key={track.id || `${track.title || track.episodeTitle}-${index}`}\n                  onDoubleClick={() => handleDoubleClick(index)}\n                  className={`playlist-item ${\n                    currentIndex === index ? \"active\" : \"\"\n                  }`}\n                >\n                  {isSong\n                    ? `${track.title} - ${track.artist} (${track.year || \"Unknown\"})`\n                    : isPodcast\n                    ? `${track.podcast || \"Podcast\"} - ${track.episodeTitle}`\n                    : \"Unknown Track\"}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        {/* Status Display */}\n        <h3 className=\"status\">\n          {currentIndex !== null && tracks[currentIndex] \n            ? (isPlaying \n                ? `‚ñ∂ Playing: ${tracks[currentIndex].title || tracks[currentIndex].episodeTitle}` \n                : \"‚è∏ Paused\")\n            : \"No track selected\"}\n        </h3>\n\n        {/* Player Controls */}\n        <div className=\"controls\">\n          <button onClick={handlePrev}>‚èÆÔ∏è Prev</button>\n          <button onClick={handlePlayPause}>{isPlaying ? \"‚è∏ Pause\" : \"‚ñ∂ Play\"}</button>\n          <button onClick={handleNext}>‚è≠Ô∏è Next</button>\n          <button onClick={handleShuffle}>üîÄ Shuffle</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Playlist;\n","import React from \"react\";\nimport Playlist from \"./Playlist\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>My Music Player</h1>\n      <Playlist />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}